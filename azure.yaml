# yaml-language-server: $schema=https://raw.githubusercontent.com/Azure/azure-dev/main/schemas/v1.0/azure.yaml.json

# This name is used as part of the container repostiory name
name: cloud-native-todo
metadata:
    template: azd-init@1.5.0
hooks:
  postpackage: # Example of an inline script. (shell is required for inline scripts)
    shell: sh
    run: echo 'Package complete!'
  postprovision:
    shell: "sh"
    interactive: true
    # TODO: provide a cross platform way to run this script
    run: | 
        azd env get-values --no-prompt > .env.docker
        cp .env.docker client-todo/.env
        cp .env.docker api-todo/.env
  predeploy:
    shell: "sh"
    interactive: true
    run: |
        azd env get-values --no-prompt > .env.docker
        cp .env.docker client-todo/.env
        cp .env.docker api-todo/.env
  postdeploy: # Example of an inline script. (shell is required for inline scripts)
    shell: sh
    run: echo 'Deploy complete!'
services:
    # this name is used as part of the container repository name, the tag is used to identify the image
    api:
        project: api-todo
        host: containerapp
        language: js
        docker: 
            tag: 'azd-resource-token-${RESOURCE_TOKEN}'
    client:
        project: client-todo
        language: js
        host: containerapp
        docker: 
            # Setting an static tag for the docker image will allow us to re-build it before deploying.
            # This strategy works around the `azd up` order, where package is called before provision, and the image created by package is used by deploy.
            ### If the tag is not static, calling package from a hook would produce a new unique image, which would be ignored by deploy.
            # For static-web-applications, package must happen after provision.  
            # Reference: engineering PR https://github.com/Azure-Samples/todo-nodejs-mongo-aca/compare/staging...pr/3171#diff-7d76d7533653c23b753fc7ce638cf64bdb5e419927d276af836d3a03fdf1745a      
            tag: 'azd-resource-token-${RESOURCE_TOKEN}'
        hooks:
            postpackage: # Example of an inline script. (shell is required for inline scripts)
                shell: sh
                run: echo 'Client Package complete!'
            predeploy:
                # windows is provided but untested - use at your own risk
                windows:
                    shell: pwsh
                    run: |
                        npm run build:env
                posix:
                    shell: sh
                    run: |
                        npm run build:env
            postdeploy:
                shell: sh
                run: echo 'Client deploy complete!'